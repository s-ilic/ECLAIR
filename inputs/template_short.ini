#==================================#
#=== Template for JAM .ini file ===#
#==================================#
# N.B. : 
# > Lines starting with # are treated as comments
# > Comments should not be added at the end of regular lines


####################
### Input/output ###
####################

#----------------------#
# Root of output files #
#----------------------#-----------------------------------------------------#
# Notes :                                                                    #
# > output files will have "output_root" + ".suffix" as their full path/name #
#----------------------------------------------------------------------------#
output_root  /path_to_output_folder/root_of_output_files

#-------------------------------#
# Type of (optional) input file #
#-------------------------------#------------------------------------------------#
# Current choices :                                                              #
# >  nothing: randomizes initial walkers  according to "start" & "width" columns #
# > "chain N": use step no. N of input chain (if omitted, defaults to last step) #
# > "one_walker": position of one walker, needs parameter names as header        #
# > "many_walkers": positions of many walkers, needs parameter names as header   #
# Important note :                                                               #
# > if input_type == chain, make sure it's not running ! otherwise it may        #
#   forcefully kill your running MCMC process ; use "many_walkers" from          #
#   that same chain, it is much safer                                            #
#--------------------------------------------------------------------------------#
#input_type  chain

#-------------------------------#
# Path to (optional) input file #
#-------------------------------#----------------------------------#
# > if input_type==chain, give .h5 chain filename                  #
# > if one_walker==one_walker or many_walkers, give input filename #
#------------------------------------------------------------------#
#input_fname  /home/silic/Science/JAM/test.h5

#-----------------------------------------------------#
# Continue a previously started chain ("yes" or "no") #
#-----------------------------------------------------#--------------#
# Important note :                                                   #
# > if "no", and output chain already exist, it will be overwriten ! #
#--------------------------------------------------------------------#
continue_chain  no


############
### MCMC ###
############

#--------------------------------#
# Setting for parallel computing #
#--------------------------------#-----------------------------------#
# Current choices :                                                  #
# > "none": no parallelization                                       #
# > "multiprocessing N": OpenMP parallelization with N threads       #
# > "MPI": MPI parallelization (requires "schwimmbad" python module) #
#--------------------------------------------------------------------#
parallel  none

#------------------------------------------------------------------------------#
# Number of walkers (has to be at least 2 times the number of free parameters) #
#------------------------------------------------------------------------------#
# Current choices :                                                            #
# > "custom  X"  => fixed to X                                                 #
# > "prop_to  X" => X times the number of free parameters                      #
#------------------------------------------------------------------------------#
#n_walkers  custom  1000
n_walkers  prop_to  4

#----------------------#
# Number of MCMC steps #
#----------------------#
n_steps  10000

#-----------------------------------------------#
# Thinning factor (i.e. keep only every X step) #
#-----------------------------------------------#
thin_by  1

#-------------------------#
# Temperature of the MCMC #
#-------------------------#
temperature  1.

#-------------------------------------------------------------------------#
# Parameter for the "stretch move" of the Ensemble sampler (default is 2) #
#-------------------------------------------------------------------------#
stretch  2.


#############
### CLASS ###
#############

#----------------------------------------------------------------------#
# Select the version of CLASS to be used (give name of Python wrapper) #
#----------------------------------------------------------------------#
which_class  classy


###################
### Likelihoods ###
###################

#---------------------------------------#
# Select the likelihoods to be combined #
#---------------------------------------#
# Current choices :                     #
# > BAO_2014                            #
# > H0_HST                              #
# > SN_JLA                              #
# > Planck2015_highTT                   #
# > Planck2015_highTTlite               #
# > Planck2015_highTTTEEE               #
# > Planck2015_highTTTEEElite           #
# > Planck2015_lensT                    #
# > Planck2015_lensTP                   #
# > Planck2015_lowTEB                   #
# > Planck2015_lowTT                    #
# > Planck2018_highTT                   #
# > Planck2018_highTTlite               #
# > Planck2018_highTTTEEE               #
# > Planck2018_highTTTEEElite           #
# > Planck2018_lensCMBdep               #
# > Planck2018_lensCMBmarg              #
# > Planck2018_lowBB                    #
# > Planck2018_lowEE                    #
# > Planck2018_lowEEBB                  #
# > Planck2018_lowTT                    #
#---------------------------------------#
likelihood  BAO_2014


############################
### Free MCMC parameters ###
############################
#---------------------------------------------------------------#
# Column order :                                                #
# > type  name  start  min  max  width                          #
# Notes :                                                       #
# > "type" : "var_class" if a class parameter otherwise "var"   #
# > "width" : only used for initializing the walkers positions  #
#---------------------------------------------------------------#

### Class parameters
var_class  omega_cdm      0.1197    0.1     0.13  0.002
var_class  H0            67.0      45.0    90.0   0.1


############################
### Priors on parameters ###
############################
#---------------------------------#
# Only Gaussian prior implemented #
# Column order :                  #
# > type  name  mean  stddev      #
#---------------------------------#



########################
### Fixed parameters ###
########################
#--------------------------------------------------------------------#
# Column order :                                                     #
# > type  name  value                                                #
# Notes :                                                            #
# > "type" : "fix_class" if a class parameter otherwise "fix"        #
# > if "name" or "value" requires whitespace, use single quotes e.g. #
#   fix_class  'non linear'  halofit                                 #
#--------------------------------------------------------------------#

### Class parameters
#----------------------------------------#
# Note :                                 #
# > "non_linear" instead of "non linear" #
#----------------------------------------#



###################################
### Parameters special settings ###
###################################

#-------------------------------#
# Put constraints on parameters #
#-------------------------------#---------------------------------#
# Syntax :                                                        #
# > constraint  XXX  =  YYY                                       #
# > where XXX is the parameter forced to be equal to YYY          #
# Notes :                                                         #
# > YYY can be any fonction of any parameter                      #
# > in XXX and YYY, use syntax class[par_name] if class parameter #
# > in XXX and YYY, use syntax likes[par_name] otherwise          #
# Examples :                                                      #
# > class[omega_b]  =  class[omega_cdm]                           #
#-----------------------------------------------------------------#
#constraint  class[par_1] = class[par_2]+class[par_3]

#-------------------------------------------#
# Request some derived parameters in output #
#-------------------------------------------#------------------------------#
# Syntax :                                                                 #
# > deriv  name  quantity_requested                                        #
# Notes :                                                                  #
# > "name" == name of derived parameter in chain (should contain no space) #
# > "quantity_requested" can be any command one wants                      #
# > class wrapper accessible via "class_run" instance                      #
# > class background quantities accessible via "bg" dictionnary            #
# > class parameters accessible via "class_input" dictionnary              #
# > nuisance parameters accessible via "likes_input" dictionnary           #
# Examples :                                                               #
# > for H0 :       deriv  H0      bg['H [1/Mpc]'][-1]*299792.458           #
# > for sigma_8 :  deriv  sigma8  class_run.sigma8()                       #
# > for sum_nu  :  deriv  sum_nu  class_input['m_ncdm_val_0']+...          #
#--------------------------------------------------------------------------#
# deriv  H0      bg['H [1/Mpc]'][-1]*299792.458
