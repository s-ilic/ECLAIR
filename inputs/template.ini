#=====================================#
#=== Template for ECLAIR .ini file ===#
#=====================================#
# N.B. :
# > Lines starting with # are treated as comments
# > Comments should not be added at the end of regular lines
# > if any value or argument contains whitespaces (e.g. the "non linear"
#   parameter for CLASS), it needs to be put between *double* quotes

##################
### Debug mode ###
##################

#-----------------------------------------------------------------------#
# Whether to activate "debug mode" or not ("yes" or "no", default "no") #
#-----------------------------------------------------------------------#----------------#
# With debug mode on, the code will stop right before the start of the sampling process. #
# This allows the user to test in an interactive Python session their likelihood, check  #
# the initial positions of walkers, etc. Additional messages will also be printed in     #
# case of errors in CLASS and/or likelihoods, making it useful for debugging.            #
#----------------------------------------------------------------------------------------#
debug_mode  no


####################
### Input/output ###
####################

#------------------------#
# Format of output files #
#------------------------#--------------------------------------------------------------------#
# Current choices :                                                                           #
# > "text": output files will be in plain text (default)                                      #
# > "HDF5": output files will be in HDF5 binary data format (requires the h5py Python module) #
#---------------------------------------------------------------------------------------------#
output_format  text

#----------------------#
# Root of output files #
#----------------------#---------------------------------------------------------------#
# Notes :                                                                              #
# > the full output filenames will be "output_root" + an automatically appended suffix #
# > appended suffixes are:                                                             #
#   * '.ini' for the copy of the .ini file used                                        #
#   * '.input' for the last state of the walkers positions                             #
#   * '.txt' or '.h5' for the main chain depending on the chosen file format           #
#--------------------------------------------------------------------------------------#
output_root  /path_to_output_folder/root_of_output_files

#-------------------------------#
# Type of (optional) input file #
#-------------------------------#---------------------------------------------------------------------------#
# Current choices :                                                                                         #
# > nothing: randomizes initial walkers in a ball according to "start" & "width" columns of parameters      #
# > "text_chain N": use step number N of input text chain (if absent, N defaults to last step i.e. N = -1)  #
# > "HDF5_chain N": use step number N of input HDF5 chain (same remark as above)                            #
# > "walkers": use text file with position of walkers (one per line), with parameter names as header        #
# Important note :                                                                                          #
# > when using input_type == HDF5_chain, make sure the source chain is not running ! otherwise it may       #
#   forcefully kill your running MCMC process; using the "walkers" .input file from the same chain is safer #
#-----------------------------------------------------------------------------------------------------------#
#input_type  text_chain
#input_type  HDF5_chain

#-------------------------------#
# Path to (optional) input file #
#-------------------------------#-------------------------------------------#
# > if input_type==text_chain or HDF_chain, give chain filename WITH SUFFIX #
#---------------------------------------------------------------------------#
#input_fname  /path_to_input_folder/input_chain_full_name.h5
#input_fname  /path_to_input_folder/input_chain_full_name.txt
#input_fname  /path_to_input_folder/input_walker_positions.input

#-----------------------------------------------------#
# Continue a previously started chain ("yes" or "no") #
#-----------------------------------------------------#----------------------#
# Important note :                                                           #
# > if "yes", the code will NOT automatically continue from the last sample: #
#   you need to manually set the input_type and input_fname options to do so #
#----------------------------------------------------------------------------#
continue_chain  no


############
### MCMC ###
############

#--------------------------------#
# Setting for parallel computing #
#--------------------------------#-----------------------------------#
# Current choices :                                                  #
# > "none": no parallelization                                       #
# > "multiprocessing N": OpenMP parallelization with N threads       #
# > "MPI": MPI parallelization (requires "schwimmbad" python module) #
#--------------------------------------------------------------------#
parallel  none

#------------------------------------------------------------------------------#
# Number of walkers (has to be at least 2 times the number of free parameters) #
#------------------------------------------------------------------------------#
# Current choices :                                                            #
# > "custom  X"  => number of walkers fixed to X                               #
# > "prop_to  X" => number of walkers is X times the number of free parameters #
#------------------------------------------------------------------------------#
#n_walkers  custom  1000
n_walkers  prop_to  4

#----------------------#
# Number of MCMC steps #
#----------------------#
n_steps  10000

#-----------------------------------------------#
# Thinning factor (i.e. keep only every X step) #
#-----------------------------------------------#
thin_by  1

#-------------------------#
# Temperature of the MCMC #
#-------------------------#
temperature  1.

#-------------------------------------------------------------------------#
# Parameter for the "stretch move" of the Ensemble sampler (default is 2) #
#-------------------------------------------------------------------------#
stretch  2.


#############
### CLASS ###
#############

#----------------------------------------------------------------------#
# Select the version of CLASS to be used (give name of Python wrapper) #
#----------------------------------------------------------------------#
which_class  classy


###################
### Likelihoods ###
###################

#----------------------------------------------------------#
# Syntax:                                                  #
# > likelihood  name_of_likelihood                       #
# For a list of available likelihoods, see likelihoods.txt #
# in the "likelihoods" folder                              #
#----------------------------------------------------------#
likelihood  Planck2015_lowTEB
likelihood  Planck2015_highTTTEEE


############################
### Free MCMC parameters ###
############################
#---------------------------------------------------------------#
# Syntax :                                                      #
# > type  par_name  start  min  max  width                      #
# Notes :                                                       #
# > "type" : "var_class" if a CLASS parameter otherwise "var"   #
# > "width" : only used for initializing the walkers positions, #
#             be careful not to set to 0                        #
#---------------------------------------------------------------#

### Class parameters
var_class  omega_b        0.02222   0.005   0.1   0.0001
var_class  omega_cdm      0.1197    0.1     0.13  0.002
var_class  H0            67.0      45.0    90.0   0.1
var_class  tau_reio       0.076     0.01    0.8   0.01
var_class  ln10^{10}A_s   3.096     2.0     4.0   0.01
var_class  n_s            0.977     0.8     1.2   0.01

### Calibration parameter common to all Planck 2015/18 likelihoods (incl. lensing)
var  A_planck  1.  0.9  1.1  0.002

### Planck 2015 non-lite high-ell TT varying nuisance parameters
var  ps_A_100_100       250.     0.   400.   24.
var  ps_A_143_143        40.     0.   400.   10.
var  ps_A_143_217        40.     0.   400.   12.
var  ps_A_217_217       100.     0.   400.   13.
var  A_cib_217           65.     0.   200.   10.
var  A_sz                 5.     0.    10.    1.
var  ksz_norm             5.     0.    10.    1.
var  xi_sz_cib            0.5    0.     1.    0.1
var  gal545_A_100         7.     0.    50.    2.
var  gal545_A_143         9.     0.    50.    2.
var  gal545_A_143_217    21.     0.   100.    4.
var  gal545_A_217        80.     0.   400.   15.
var  calib_100T           0.999  0.     3.    0.001
var  calib_217T           0.995  0.     3.    0.002

### Additional varying nuisance parameters for Planck 2015 non-lite high-ell TTTEEE
var  galf_EE_A_100        0.06   0.   10.   0.012
var  galf_EE_A_100_143    0.05   0.   10.   0.015
var  galf_EE_A_100_217    0.11   0.   10.   0.03
var  galf_EE_A_143        0.1    0.   10.   0.02
var  galf_EE_A_143_217    0.24   0.   10.   0.05
var  galf_EE_A_217        0.72   0.   10.   0.15
var  galf_TE_A_100        0.14   0.   10.   0.04
var  galf_TE_A_100_143    0.12   0.   10.   0.04
var  galf_TE_A_100_217    0.3    0.   10.   0.09
var  galf_TE_A_143        0.24   0.   10.   0.07
var  galf_TE_A_143_217    0.6    0.   10.   0.18
var  galf_TE_A_217        1.8    0.   10.   0.5

### Planck 2018 non-lite high-ell TT varying nuisance parameters
var  ps_A_100_100       250.       0.  400.  24.
var  ps_A_143_143        40.       0.  400.  10.
var  ps_A_143_217        40.       0.  400.  12.
var  ps_A_217_217       100.       0.  400.  13.
var  A_cib_217           65.       0.  200.  10.
var  A_sz                 5.       0.   10.   1.
var  ksz_norm             5.       0.   10.   1.
var  xi_sz_cib            0.5      0.    1.   0.1
var  gal545_A_100         8.6      0.   50.   2.
var  gal545_A_143        10.6      0.   50.   2.
var  gal545_A_143_217    23.5      0.  100.   8.5
var  gal545_A_217        91.9      0.  400.  20.
var  calib_100T           1.0002   0.    3.   0.0007
var  calib_217T           0.99805  0.    3.   0.00065

### Additional varying nuisance parameters for Planck 2018 non-lite high-ell TTTEEE
var  galf_TE_A_100        0.13   0.   10.   0.042
var  galf_TE_A_100_143    0.13   0.   10.   0.036
var  galf_TE_A_100_217    0.46   0.   10.   0.09
var  galf_TE_A_143        0.207  0.   10.   0.072
var  galf_TE_A_143_217    0.69   0.   10.   0.09
var  galf_TE_A_217        1.938  0.   10.   0.54


############################
### Priors on parameters ###
############################
#---------------------------------------#
# Only Gaussian prior implemented       #
# Syntax :                              #
# > gauss_prior  par_name  mean  stddev #
#---------------------------------------#

### Prior on calibration parameter common to all Planck 2015/18 likelihoods
gauss_prior  A_planck  1.  0.0025

### Priors on Planck 2015 non-lite high-ell TT varying nuisance parameters
gauss_prior  gal545_A_100         7.         2.
gauss_prior  gal545_A_143         9.         2.
gauss_prior  gal545_A_143_217    21.         8.5
gauss_prior  gal545_A_217        80.        20.
gauss_prior  calib_100T           0.9990004  0.001
gauss_prior  calib_217T           0.99501    0.002
deriv  SZ_comb  1.6*likes_input['A_sz']+likes_input['ksz_norm']
gauss_prior  SZ_comb              9.5        3.

### Priors on additional varying nuisance parameters for Planck 2015 non-lite high-ell TTTEEE
gauss_prior  galf_EE_A_100        0.06       0.012
gauss_prior  galf_EE_A_100_143    0.05       0.015
gauss_prior  galf_EE_A_100_217    0.11       0.033
gauss_prior  galf_EE_A_143        0.1        0.02
gauss_prior  galf_EE_A_143_217    0.24       0.048
gauss_prior  galf_EE_A_217        0.72       0.14
gauss_prior  galf_TE_A_100        0.14       0.042
gauss_prior  galf_TE_A_100_143    0.12       0.036
gauss_prior  galf_TE_A_100_217    0.3        0.09
gauss_prior  galf_TE_A_143        0.24       0.072
gauss_prior  galf_TE_A_143_217    0.6        0.18
gauss_prior  galf_TE_A_217        1.8        0.54

### Priors on Planck 2018 non-lite high-ell TT varying nuisance parameters
gauss_prior  gal545_A_100         8.6        2.
gauss_prior  gal545_A_143        10.6        2.
gauss_prior  gal545_A_143_217    23.5        8.5
gauss_prior  gal545_A_217        91.9       20.
gauss_prior  calib_100T           1.0002     0.0007
gauss_prior  calib_217T           0.99805    0.00065
deriv  SZ_comb  1.6*likes_input['A_sz']+likes_input['ksz_norm']
gauss_prior  SZ_comb              9.5        3.

### Priors on additional varying nuisance parameters for Planck 2018 non-lite high-ell TTTEEE
gauss_prior  galf_TE_A_100        0.13       0.042
gauss_prior  galf_TE_A_100_143    0.13       0.036
gauss_prior  galf_TE_A_100_217    0.46       0.09
gauss_prior  galf_TE_A_143        0.207      0.072
gauss_prior  galf_TE_A_143_217    0.69       0.09
gauss_prior  galf_TE_A_217        1.938      0.54


########################
### Fixed parameters ###
########################
#--------------------------------------------------------------------#
# Syntax :                                                           #
# > type  name  value                                                #
# Notes :                                                            #
# > "type" : "fix_class" if a CLASS parameter otherwise "fix"        #
# > if "name" or "value" requires whitespace, use single quotes e.g. #
#   fix_class  'non linear'  halofit                                 #
#--------------------------------------------------------------------#

### CLASS parameters
#----------------------------------------#
# Note :                                 #
# > "non_linear" instead of "non linear" #
#----------------------------------------#
fix_class  output         tCl,pCl,lCl,mPk
fix_class  lensing        yes
fix_class  l_max_scalars  2508
fix_class  T_cmb          2.7255
fix_class  "non linear"   halofit
fix_class  P_k_max_h/Mpc  1.
fix_class  N_ur           2.0328
fix_class  N_ncdm         1
fix_class  m_ncdm         0.06

### Planck 2015 non-lite high-ell TT fixed nuisance parameters
fix  cib_index              -1.3

### Additional fixed parameters for Planck 2015 non-lite high-ell TTTEEE
fix  galf_EE_index          -2.4
fix  galf_TE_index          -2.4
fix  bleak_epsilon_0_0T_0E   0.
fix  bleak_epsilon_1_0T_0E   0.
fix  bleak_epsilon_2_0T_0E   0.
fix  bleak_epsilon_3_0T_0E   0.
fix  bleak_epsilon_4_0T_0E   0.
fix  bleak_epsilon_0_0T_1E   0.
fix  bleak_epsilon_1_0T_1E   0.
fix  bleak_epsilon_2_0T_1E   0.
fix  bleak_epsilon_3_0T_1E   0.
fix  bleak_epsilon_4_0T_1E   0.
fix  bleak_epsilon_0_0T_2E   0.
fix  bleak_epsilon_1_0T_2E   0.
fix  bleak_epsilon_2_0T_2E   0.
fix  bleak_epsilon_3_0T_2E   0.
fix  bleak_epsilon_4_0T_2E   0.
fix  bleak_epsilon_0_1T_1E   0.
fix  bleak_epsilon_1_1T_1E   0.
fix  bleak_epsilon_2_1T_1E   0.
fix  bleak_epsilon_3_1T_1E   0.
fix  bleak_epsilon_4_1T_1E   0.
fix  bleak_epsilon_0_1T_2E   0.
fix  bleak_epsilon_1_1T_2E   0.
fix  bleak_epsilon_2_1T_2E   0.
fix  bleak_epsilon_3_1T_2E   0.
fix  bleak_epsilon_4_1T_2E   0.
fix  bleak_epsilon_0_2T_2E   0.
fix  bleak_epsilon_1_2T_2E   0.
fix  bleak_epsilon_2_2T_2E   0.
fix  bleak_epsilon_3_2T_2E   0.
fix  bleak_epsilon_4_2T_2E   0.
fix  bleak_epsilon_0_0E_0E   0.
fix  bleak_epsilon_1_0E_0E   0.
fix  bleak_epsilon_2_0E_0E   0.
fix  bleak_epsilon_3_0E_0E   0.
fix  bleak_epsilon_4_0E_0E   0.
fix  bleak_epsilon_0_0E_1E   0.
fix  bleak_epsilon_1_0E_1E   0.
fix  bleak_epsilon_2_0E_1E   0.
fix  bleak_epsilon_3_0E_1E   0.
fix  bleak_epsilon_4_0E_1E   0.
fix  bleak_epsilon_0_0E_2E   0.
fix  bleak_epsilon_1_0E_2E   0.
fix  bleak_epsilon_2_0E_2E   0.
fix  bleak_epsilon_3_0E_2E   0.
fix  bleak_epsilon_4_0E_2E   0.
fix  bleak_epsilon_0_1E_1E   0.
fix  bleak_epsilon_1_1E_1E   0.
fix  bleak_epsilon_2_1E_1E   0.
fix  bleak_epsilon_3_1E_1E   0.
fix  bleak_epsilon_4_1E_1E   0.
fix  bleak_epsilon_0_1E_2E   0.
fix  bleak_epsilon_1_1E_2E   0.
fix  bleak_epsilon_2_1E_2E   0.
fix  bleak_epsilon_3_1E_2E   0.
fix  bleak_epsilon_4_1E_2E   0.
fix  bleak_epsilon_0_2E_2E   0.
fix  bleak_epsilon_1_2E_2E   0.
fix  bleak_epsilon_2_2E_2E   0.
fix  bleak_epsilon_3_2E_2E   0.
fix  bleak_epsilon_4_2E_2E   0.
fix  calib_100P              1.
fix  calib_143P              1.
fix  calib_217P              1.
fix  A_pol                   1.

# Planck 2018 non-lite high-ell TT fixed nuisance parameters
fix  cib_index          -1.3
fix  A_sbpx_100_100_TT   1.
fix  A_sbpx_143_143_TT   1.
fix  A_sbpx_143_217_TT   1.
fix  A_sbpx_217_217_TT   1.

# Additional fixed parameters for Planck 2018 non-lite high-ell TTTEEE
fix  galf_EE_A_100             0.055
fix  galf_EE_A_100_143         0.040
fix  galf_EE_A_100_217         0.094
fix  galf_EE_A_143             0.086
fix  galf_EE_A_143_217         0.21
fix  galf_EE_A_217             0.70
fix  galf_EE_index            -2.4
fix  galf_TE_index            -2.4
fix  A_cnoise_e2e_100_100_EE   1.
fix  A_cnoise_e2e_143_143_EE   1.
fix  A_cnoise_e2e_217_217_EE   1.
fix  A_sbpx_100_100_EE         1.
fix  A_sbpx_100_143_EE         1.
fix  A_sbpx_100_217_EE         1.
fix  A_sbpx_143_143_EE         1.
fix  A_sbpx_143_217_EE         1.
fix  A_sbpx_217_217_EE         1.
fix  calib_100P                1.021
fix  calib_143P                0.966
fix  calib_217P                1.04
fix  A_pol                     1.


###################################
### Parameters special settings ###
###################################

#-------------------------------#
# Put constraints on parameters #
#-------------------------------#-----------------------------------#
# Syntax :                                                          #
# > constraint  XXX  =  YYY                                         #
# > where XXX is the parameter forced to be equal to YYY            #
# Notes :                                                           #
# > YYY can be any fonction of any number of parameters             #
# > in XXX and YYY, use syntax class[par_name] if CLASS parameter   #
# > in XXX and YYY, use syntax likes[par_name] otherwise            #
# Examples :                                                        #
# > constraint  class[omega_b]  =  class[omega_cdm] + 5 * class[H0] #
#-------------------------------------------------------------------#

#-------------------------------------------#
# Request some derived parameters in output #
#-------------------------------------------#------------------------------#
# Syntax :                                                                 #
# > deriv  name  quantity_requested                                        #
# Notes :                                                                  #
# > "name" == name of derived parameter in chain (should contain no space) #
# > "quantity_requested" can be any command one wants                      #
# > CLASS wrapper accessible via "class_run" instance                      #
# > CLASS background quantities accessible via "bg" dictionnary            #
# > CLASS parameters accessible via "class_input" dictionnary              #
# > nuisance parameters accessible via "likes_input" dictionnary           #
# Examples :                                                               #
# > for H0 :       deriv  H0      bg['H [1/Mpc]'][-1]*299792.458           #
# > for sigma_8 :  deriv  sigma8  class_run.sigma8()                       #
# > for sum_nu  :  deriv  sum_nu  class_input['m_ncdm_val_0']+...          #
#--------------------------------------------------------------------------#
