~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~ Notes about ECLAIR .ini files ~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~ * Lines whose first non-blank character is not a letter are treated as     ~~
~~   comments                                                                 ~~
~~ * Comments should be on their own lines                                    ~~
~~ * If any value or argument contains whitespaces (e.g. the "non linear"     ~~
~~   parameter for CLASS), it needs to be put between DOUBLE quotes (i.e. "") ~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


================
== Debug mode ==
================

-------------------------------------------------------------------------
-- Whether to activate debug mode or not ("yes" or "no", default "no") --
--------------------------------------------------------------------------------
-- With debug mode on, the code will stop right before the start of the       --
-- sampling process. This allows the user to test in an interactive Python    --
-- session their likelihood, check the initial positions of walkers, etc.     --
-- Additional messages will also be printed in case of errors in CLASS and/or --
-- likelihoods, making it useful for debugging.                               --
--------------------------------------------------------------------------------
#debug_mode  no


==================
== Input/output ==
==================

--------------------------
-- Root of output files --
--------------------------------------------------------------------------------
-- Notes:                                                                     --
-- * Output files names will be "output_root" + suffix, where suffix is:      --
--   - '.ini' for a copy of the input .ini file used                          --
--   - '.txt' for the main chain file                                         --
--------------------------------------------------------------------------------
output_root  /path_to_output_folder/root_of_output_files

-------------------------
-- Optional input file --
--------------------------------------------------------------------------------
-- * If "input_fname" is omitted, the initial positions of walkers are drawn  --
--   from a Gaussian distribution of mean "start" and std dev "width", as     --
--   specified for each free parameter on their corresponding "var" line      --
-- * Otherwise, one of the two following syntax should be used:               --
--   - "input_fname  path_to_file"                                            --
--   - "input_fname  path_to_file  N"                                         --
--   where "path_to_file" points to a previous ECLAIR chain, and "N" is an    --
--   optional integer specifying the step of that chain below which samples   --
--   be used as starting points (if unspecified, defaults to the last step)   --
--------------------------------------------------------------------------------
#input_fname  /path_to_input_folder/input_chain_full_name.txt

------------------------
-- Prune input sample --
--------------------------------------------------------------------------------
-- Allows the user to apply conditions on the input samples (i.e. from the    --
-- "input_fname" chain) to be kept as starting point for the new chain.       --
-- Syntax should be one of those two:                                         --
--   * "keep_input  variable  <  N"                                           --
--   * "keep_input  variable  >  N"                                           --
-- where "variable" is any of the variable (MCMC or derived) present in the   --
-- "input_fname" chain and "N" is a number.                                   --
--------------------------------------------------------------------------------
#keep_input  lnlike  >  -10


-----------------------------------------------------------------------
-- Continue a previously started chain ("yes" or "no", default "no") --
--------------------------------------------------------------------------------
-- Notes:                                                                     --
-- * If "no" and "output_root.txt" exists, the code will raise an error. If   --
--   it does not exist, it will create the file.                              --
-- * If "yes" and "output_root.txt" does not exist, the code will raise an    --
--   error.                                                                   --
-- * If "yes" and "output_root.txt" exists, the code will NOT automatically   --
--   continue from the last sample of "output_root.txt" it will simply append --
--   a new chain at the end. If you want to continue from the last sample,    --
--   explicitly set the "input_fname" option.                                 --
--------------------------------------------------------------------------------
#continue_chain  no


==========
== MCMC ==
==========

----------------------------------------------------------
-- Select the MCMC sampler to be used (default "emcee") --
--------------------------------------------------------------------------------
-- Possible choices:                                                          --
-- * "emcee" (https://emcee.readthedocs.io)                                   --
-- * "zeus" (https://zeus-mcmc.readthedocs.io)                                --
--------------------------------------------------------------------------------
#which_sampler  emcee

-----------------------------------------------------
-- Setting for parallel computing (default "none") --
--------------------------------------------------------------------------------
-- Current choices :                                                          --
-- * "none": no parallelization                                               --
-- * "multiprocessing N": OpenMP parallelization with N threads               --
-- * "MPI": MPI parallelization (requires "schwimmbad" python module)         --
--------------------------------------------------------------------------------
#parallel  none

-----------------------------------------------------
-- Set the number of walkers (default "prop_to 2") --
--------------------------------------------------------------------------------
-- Current choices :                                                          --
-- * "custom  N": number of walkers fixed to N                                --
-- * "prop_to  N": number of walkers is N times the number of free parameters --
-- Note:                                                                      --
-- Number of walkers has to be at least twice the number of free parameters   --
--------------------------------------------------------------------------------
#n_walkers  prop_to  2

--------------------------
-- Number of MCMC steps --
--------------------------
n_steps  10000

---------------------------------------------------------
-- MCMC thinning factor (default 1., i.e. no thinning) --
---------------------------------------------------------
#thin_by  1

------------------------------------------
-- Temperature of the MCMC (default 1.) --
------------------------------------------
#temperature  1.

--------------------------------------------
-- Optional keyword arguments for sampler --
--------------------------------------------------------------------------------
-- Notes:                                                                     --
-- * Syntax should be "sampler_kwarg  kwarg_name  kwarg_value"                --
-- * Sampler module is accessible via the generic variable name "MCMCsampler" --
--------------------------------------------------------------------------------
#sampler_kwarg  moves  MCMCsampler.moves.StretchMove(a=2)


===========
== CLASS ==
===========

--------------------------------------------------------------------------------
-- Select the version of CLASS to be used (provide name of Python wrapper)    --
--------------------------------------------------------------------------------
which_class  classy


=================
== Likelihoods ==
=================

--------------------------------------------------------------------------------
-- Syntax should be "likelihood  name_of_likelihood"                          --
-- For a detailed list of available likelihoods, see likelihoods.md in        --
-- "likelihoods" folder                                                       --
--------------------------------------------------------------------------------
likelihood  CMB.Planck.PR3.highTTTEEElite


==========================
== Free MCMC parameters ==
==========================

--------------------------------------------------------------------------------
-- Syntax should be "type  par_name  start  min  max  width" where:           --
-- * "type": "var_class" if a CLASS parameter, otherwise "var"                --
-- * "par_name": parameter name (as known in CLASS or likelihood modules)     --
-- * "start": mean of Gaussian used to initialize walkers positions           --
-- * "min/max": hard bounds (i.e. prior) on parameter value                   --
-- * "width": std dev of Gaussian used to initialize walkers positions        --
-- Note:                                                                      --
-- If an array of parameter needs to be passed to CLASS, append "_val_N" to   --
-- to each parameter where the integer "N" marks their position in the array. --
-- Example: "m_ncdm_val_0", "m_ncdm_val_1" for the masses of 2 neutrinos      --
--------------------------------------------------------------------------------

# Class parameters
var_class  omega_b        0.02222   0.      0.1   0.0001
var_class  omega_cdm      0.1197    0.      0.3   0.002
var_class  H0            67.0      45.0    90.0   0.1
var_class  tau_reio       0.076     0.01    0.8   0.01
var_class  ln10^{10}A_s   3.096     2.0     4.0   0.01
var_class  n_s            0.977     0.8     1.2   0.01

# Likelihood parameters
var  A_planck  1.  0.9  1.1  0.002


==========================
== Priors on parameters ==
==========================

--------------------------------------------------------------------------------
-- Uniform and Gaussian priors are implemented, with respective syntax:       --
-- * uni_prior    par_name  lower  upper                                      --
-- * gauss_prior  par_name  mean   stddev                                     --
--------------------------------------------------------------------------------

gauss_prior  A_planck  1.  0.0025


======================
== Fixed parameters ==
======================

--------------------------------------------------------------------------------
-- Syntax should be "type  par_name  value" where:                            --
-- * "type" : "fix_class" if a CLASS parameter, otherwise "fix"               --
-- * "par_name": parameter name (as known in CLASS or likelihoods)            --
-- * "value": parameter value (can be a string)                               --
--------------------------------------------------------------------------------

# CLASS parameters
fix_class  output         tCl,pCl,lCl
fix_class  lensing        yes
fix_class  l_max_scalars  2508
fix_class  "non linear"   halofit
fix_class  modes          s
fix_class  N_ur           2.0328
fix_class  N_ncdm         1
fix_class  m_ncdm         0.06


=================================
== Parameters special settings ==
=================================

-----------------------------------
-- Put constraints on parameters --
--------------------------------------------------------------------------------
-- Syntax should be "constraint  XXX = YYY", where XXX is the parameter       --
-- forced to be equal to YYY, an arbitrary function of any input (fixed or    --
-- varying) parameters. In XXX and YYY:                                       --
-- * CLASS parameters are accessible via the "class_input" dictionnary        --
-- * nuisance parameters are accessible via the "lkl_input" dictionnary       --
--------------------------------------------------------------------------------
#constraint  class_input['omega_b'] = class_input['n_s']+5*class_input['H0']

-----------------------------------------------
-- Request some derived parameters in output --
--------------------------------------------------------------------------------
-- Syntax should be "deriv  par_name  quantity_requested", where:             --
-- * "par_name": chosen name for the derived parameter as it will be stored   --
--               in the chain (cannot contain any blank space)                --
-- * "quantity_requested": any command/function, where:                       --
--   - the CLASS wrapper is accessible via "class_run" instance               --
--   - CLASS background quantities are accessible via "bg" dictionnary        --
--   - CLASS thermodynamical quantities are accessible via "th" dictionnary   --
--   - CLASS parameters are accessible via "class_input" dictionnary          --
--   - nuisance parameters are accessible via "lkl_input" dictionnary         --
--------------------------------------------------------------------------------
#deriv  H0_in_invMpc  bg['H [1/Mpc]'][-1]
#deriv  ns_times_two  class_input['n_s']*2
#deriv  sigma_8       class_run.sigma8()
